// Code generated by go-bindata. DO NOT EDIT.
// sources:
// hypershift-operator/controllers/hostedcluster/assets/autoscaler/deployment.yaml (1.133kB)
// hypershift-operator/controllers/hostedcluster/assets/autoscaler/role.yaml (349B)
// hypershift-operator/controllers/hostedcluster/assets/autoscaler/rolebinding.yaml (269B)
// hypershift-operator/controllers/hostedcluster/assets/autoscaler/serviceaccount.yaml (72B)
// hypershift-operator/controllers/hostedcluster/assets/capi/capa-manager-clusterrole.yaml (2.963kB)
// hypershift-operator/controllers/hostedcluster/assets/capi/capa-manager-clusterrolebinding.yaml (303B)
// hypershift-operator/controllers/hostedcluster/assets/capi/capa-manager-deployment.yaml (1.378kB)
// hypershift-operator/controllers/hostedcluster/assets/capi/capa-manager-serviceaccount.yaml (77B)
// hypershift-operator/controllers/hostedcluster/assets/capi/manager-clusterrole.yaml (1.113kB)
// hypershift-operator/controllers/hostedcluster/assets/capi/manager-clusterrolebinding.yaml (266B)
// hypershift-operator/controllers/hostedcluster/assets/capi/manager-deployment.yaml (516B)
// hypershift-operator/controllers/hostedcluster/assets/capi/manager-serviceaccount.yaml (66B)
// hypershift-operator/controllers/hostedcluster/assets/control-plane-operator/cp-operator-deployment.yaml (718B)
// hypershift-operator/controllers/hostedcluster/assets/control-plane-operator/cp-operator-role.yaml (1.398kB)
// hypershift-operator/controllers/hostedcluster/assets/control-plane-operator/cp-operator-rolebinding.yaml (299B)
// hypershift-operator/controllers/hostedcluster/assets/control-plane-operator/cp-operator-serviceaccount.yaml (77B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _autoscalerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x8a\xdb\x40\x0c\xbd\xe7\x2b\xf4\x03\x8e\x37\xa5\x87\x62\xc8\xa1\x50\xe8\xa5\x5d\x16\x0a\xbd\x6b\x67\x54\x47\x64\x66\x34\x68\x64\x43\x58\xf6\xdf\xcb\xac\xe3\xd6\x89\xb3\x59\xdd\xec\x79\xef\xe9\x49\x7a\x98\xf9\x37\x69\x61\x49\x1d\x60\xce\xa5\x1d\x77\x9b\x23\x27\xdf\xc1\x37\xca\x41\x4e\x91\x92\x6d\x22\x19\x7a\x34\xec\x36\x00\x09\x23\x75\xe0\xc2\x50\x8c\xb4\xc1\xc1\xa4\x38\x0c\xa4\x1b\x80\x80\xcf\x14\x4a\x05\x41\xd5\xba\x89\x2a\x99\x5c\x45\x14\x0a\xe4\x4c\x74\x42\x47\x34\x77\xf8\xb1\xa0\xbf\x2f\x00\xa0\x94\x03\x3b\x2c\x1d\xec\x36\x00\x46\x31\x07\x34\x3a\x0b\x2d\x9c\xd6\x0a\x17\x9a\xf7\x54\x01\x66\x6b\xb5\x9c\x24\x43\x4e\xa4\x0b\x6e\x03\x1c\xb1\xa7\x0e\x8e\x5f\xca\xb6\x77\xba\x65\x69\x67\x09\x4e\x7d\xbb\x96\xed\xc6\xdd\xf6\xd3\xc3\xf6\xe1\x9f\xc4\xdd\xf5\xcd\x35\x4a\x18\x22\xfd\x94\x21\xd9\xa2\xfb\xe4\x60\xa2\x1b\x6a\x4f\xd6\x1c\x87\x67\x72\x92\xfe\x70\x7f\x81\x02\x88\x95\xfb\x84\x76\xe8\xa0\x8d\xc9\xda\x9b\x40\x27\x31\x62\xf2\xd7\x1d\x6e\x8c\xb1\x40\xa0\xf6\x2b\x4f\x4d\xe3\x82\x0c\xbe\xc9\x2a\x23\x7b\xd2\xfd\x59\x01\x33\xaf\x90\x49\x3c\x35\xbd\xca\x90\xdf\xf4\x1b\xcf\xc5\xc9\x48\x7a\x5a\x90\xba\x3a\x64\xc9\xe8\x68\xff\xf2\x02\xdb\xc7\xf9\x0b\x5e\x5f\x57\x7a\xff\x27\xdb\x5f\x4d\xda\xde\x5f\xd2\x64\x7b\x6e\x79\x9e\x60\xc2\x55\x67\x07\x51\x36\x34\x1e\x69\xc5\xc2\x50\x24\x48\x6f\x52\xcc\x93\xea\xea\x7d\xdc\x7f\x3e\xff\x2b\xa4\x23\x3b\xfa\xea\x5c\xbd\xc7\xe3\xfd\xcb\x1b\x69\xe4\x84\xc6\x92\xbe\x2b\x3a\x7a\x22\x65\xf1\xbf\xaa\x77\x5f\xa3\x3e\x87\x68\x4a\xc7\x45\x2c\x3f\x0e\x45\x21\xa7\x64\x97\x87\x9b\xfe\x4d\xae\xd0\x47\x4e\xef\xad\x8a\x8d\xe2\xd5\xd1\x6b\xd7\x23\x9d\x3a\x18\x31\x0c\x74\xf5\x04\x90\xdf\xa2\xb7\x36\xf4\x37\x00\x00\xff\xff\x29\x9e\xca\x72\x6d\x04\x00\x00")

func autoscalerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_autoscalerDeploymentYaml,
		"autoscaler/deployment.yaml",
	)
}

func autoscalerDeploymentYaml() (*asset, error) {
	bytes, err := autoscalerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "autoscaler/deployment.yaml", size: 1133, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x35, 0x7a, 0x29, 0xb8, 0x77, 0x64, 0x8a, 0x9c, 0xdf, 0x12, 0xb2, 0xfc, 0xd6, 0xb3, 0x40, 0x3d, 0xa0, 0xf2, 0x1, 0x2f, 0x5d, 0x32, 0xe, 0x5b, 0xa2, 0x2a, 0xa9, 0x4, 0x12, 0xe6, 0x8f}}
	return a, nil
}

var _autoscalerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x4e\x3b\x6e\xc3\x30\x0c\xdd\x7d\x0a\x5d\x40\x0e\xba\x15\xbe\x40\xf7\x0e\xdd\x19\xf9\x21\x26\x22\x89\x02\x49\xa5\x9f\xd3\x17\x76\xd1\xc6\xa8\x81\x68\xd2\xe3\xfb\x5e\xb9\xce\x53\x78\x95\x8c\x81\x1a\xbf\x41\x8d\xa5\x4e\x41\xcf\x94\x46\xea\xbe\x88\xf2\x17\x39\x4b\x1d\xaf\xcf\x36\xb2\x9c\x6e\x4f\x43\x81\xd3\x4c\x4e\xd3\x10\x42\xa5\x82\x29\xa4\xdc\xcd\xa1\x91\xba\x8b\x25\xca\xd0\x58\xa8\xd2\x05\x05\xd5\x07\xed\x19\xb6\x8a\x63\xa0\xc6\x2f\x2a\xbd\x6d\x70\x7d\xf1\xd7\x3b\x7e\xc4\x9f\x86\x8d\x50\x98\x74\x4d\xd8\xe9\x0a\xa5\x85\x2b\x66\xb4\x2c\x9f\x6b\xae\x3d\xa0\x4e\xdb\x8a\xff\x82\x83\xc3\x70\x4c\x59\x6f\x3b\xfb\x0d\x7a\xde\xad\xb8\xc0\xff\xfe\x99\xed\x0e\x7a\x9b\xc9\xef\x8d\xef\xe4\x69\xf9\x0e\x00\x00\xff\xff\x5a\x2f\x31\x08\x5d\x01\x00\x00")

func autoscalerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_autoscalerRoleYaml,
		"autoscaler/role.yaml",
	)
}

func autoscalerRoleYaml() (*asset, error) {
	bytes, err := autoscalerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "autoscaler/role.yaml", size: 349, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x33, 0xdf, 0xa8, 0x82, 0xfc, 0xfd, 0xd5, 0x45, 0xa, 0xb5, 0xc7, 0x31, 0xad, 0x2b, 0x4b, 0x2f, 0xe5, 0x19, 0x53, 0x66, 0x2, 0xf8, 0xdf, 0x1e, 0x47, 0x5d, 0x6, 0x60, 0x71, 0x7e, 0x22, 0x4e}}
	return a, nil
}

var _autoscalerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xb1\x8e\xc2\x40\x0c\x04\xd0\x7e\xbf\xc2\x3f\x90\x9c\xae\x3b\x6d\x77\x34\xf4\x41\xa2\x77\x36\x26\x98\xec\xda\x91\xd7\x9b\x82\xaf\x47\x91\x90\xa8\x40\xf4\x33\xf3\x66\x61\x99\x22\x0c\x9a\xe9\xc0\x32\xb1\xcc\x01\x57\x3e\x93\x55\x56\x89\x60\x23\xa6\x1e\x9b\x5f\xd5\xf8\x8e\xce\x2a\xfd\xf2\x57\x7b\xd6\x9f\xed\x37\x14\x72\x9c\xd0\x31\x06\x00\xc1\x42\x11\x52\x6e\xd5\xc9\x3a\x6c\xae\x35\x61\x26\xeb\x0a\x0a\xce\x54\x48\x3c\x98\x66\x1a\xe8\xb2\xc7\x71\xe5\xa3\x69\x5b\x3f\x08\x01\xe0\xf5\xed\x4b\xa1\xb6\xf1\x46\xc9\xeb\x4e\x74\xcf\xfa\x89\x6c\xe3\x44\xff\x29\x69\x13\x0f\x00\xef\xa7\xc2\x23\x00\x00\xff\xff\x5c\x86\xc3\x98\x0d\x01\x00\x00")

func autoscalerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_autoscalerRolebindingYaml,
		"autoscaler/rolebinding.yaml",
	)
}

func autoscalerRolebindingYaml() (*asset, error) {
	bytes, err := autoscalerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "autoscaler/rolebinding.yaml", size: 269, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0xf9, 0x8a, 0xae, 0x90, 0xa3, 0xa0, 0xd9, 0xe, 0x4, 0xb3, 0x15, 0xb3, 0xf3, 0xe6, 0xf7, 0x42, 0x99, 0x73, 0x0, 0xaa, 0xa7, 0x81, 0x72, 0x73, 0x6d, 0xed, 0xb3, 0xc6, 0xd7, 0x6a, 0x91}}
	return a, nil
}

var _autoscalerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0e\x80\x20\x0c\x05\xd0\x9d\x53\xf4\x02\x0e\xae\xdd\x3c\x83\x89\x7b\x53\xfe\xd0\x08\xc5\x94\xc2\xf9\x7d\xf2\xd9\x83\x98\x36\x9c\x69\x9f\xe5\x35\xaf\x4c\x37\x62\x9b\xe2\x52\x1d\xcb\xb3\x74\xa4\x54\x49\xe1\x42\xe4\xd2\xc1\xa4\x6d\xcd\x44\x1c\xb2\x72\x4c\x95\x86\xf8\x03\x00\x00\xff\xff\xb9\x05\x9d\x0c\x48\x00\x00\x00")

func autoscalerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_autoscalerServiceaccountYaml,
		"autoscaler/serviceaccount.yaml",
	)
}

func autoscalerServiceaccountYaml() (*asset, error) {
	bytes, err := autoscalerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "autoscaler/serviceaccount.yaml", size: 72, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0xc4, 0x8b, 0x33, 0x9f, 0x7e, 0x4b, 0x1c, 0x22, 0x67, 0x39, 0xa, 0xd8, 0x11, 0x75, 0xd6, 0xcd, 0xc7, 0xd2, 0x40, 0x53, 0x80, 0x96, 0x2e, 0xd5, 0x82, 0x6e, 0x63, 0x49, 0xf6, 0x8, 0x43}}
	return a, nil
}

var _capiCapaManagerClusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x94\xc1\x6e\xa3\x40\x0c\x86\xef\x3c\xc5\x28\x17\xa4\x48\x10\xed\x6d\xc5\x75\x0f\x7b\x5f\xad\x7a\x77\x06\x27\x8c\x32\xcc\x8c\x6c\x4f\x92\xf6\xe9\xab\x40\x94\xd2\x12\x54\xd2\x92\x36\x0d\xa7\xb1\xcd\x2f\x3e\xff\x63\x0c\xc1\x3c\x20\xb1\xf1\xae\x50\xb4\x04\x9d\x43\x94\xca\x93\x79\x02\x31\xde\xe5\x9b\xdf\x9c\x1b\xbf\xd8\xfe\x4a\x36\xc6\x95\x85\xfa\x63\x23\x0b\xd2\x3f\x6f\x31\xa9\x51\xa0\x04\x81\x22\x51\x4a\x13\x36\x82\xff\xa6\x46\x16\xa8\x43\xa1\x5c\xb4\x36\x51\xca\x41\x8d\x85\xd2\x10\x20\xab\xc1\xc1\x1a\x29\xa3\x83\x9a\xa2\x45\x3e\x48\x33\x05\xc1\xfc\x25\x1f\x43\x13\x1e\x9e\x4c\xcd\x66\xcd\x91\x90\x7d\x24\x8d\x9d\x0a\x6e\xd1\x09\x37\xe1\x16\x69\xd9\xa9\x34\x0c\x78\x0a\xd7\x28\xa7\xb3\x35\xfc\x12\x04\x10\x5d\x9d\xa2\x18\xca\xae\x6a\x77\x2c\x5e\x48\xc5\xa8\x09\x47\x61\x95\x68\xf1\xba\x94\xba\xbd\xa3\x7c\x9f\xb5\xb7\x37\xc4\x7c\x7c\x8f\x7b\x89\x05\x0b\x48\x3c\xdb\xcc\x20\xee\x24\x44\x35\xe8\xca\x38\xe4\x5e\x62\x7a\x22\xef\x84\xbc\x0d\x16\x1c\xe6\x63\xf1\x60\xc7\xed\x08\x97\x5d\x39\xbf\x57\x9f\x1c\x1e\xf7\x61\x34\xf3\xd1\xc1\xe0\xbd\xed\xd9\xda\x24\x27\xa7\x33\x6e\x45\xc0\x42\x51\x4b\xa4\x8b\xcc\x7d\x35\x90\xdf\xfd\x17\x7d\xbe\x8d\x91\xce\x0e\x20\x4e\x0c\xd5\x9b\x83\x9f\xeb\xef\x07\xa6\xf7\x4b\x3d\xbe\x13\x7f\x6f\xcd\xdb\x76\xb1\xde\xc7\x8a\x78\xd3\xcd\x2d\x3a\x7d\x57\x0b\xa3\xd7\xd1\x15\x1c\xaf\x1e\x03\x12\x57\x66\x25\xb9\x0f\xe8\xda\xd3\x30\x57\x3a\x4f\xcf\x7d\x3d\x9d\xa7\xcf\x01\x00\x00\xff\xff\xfd\xe2\xfa\x51\x93\x0b\x00\x00")

func capiCapaManagerClusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_capiCapaManagerClusterroleYaml,
		"capi/capa-manager-clusterrole.yaml",
	)
}

func capiCapaManagerClusterroleYaml() (*asset, error) {
	bytes, err := capiCapaManagerClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capi/capa-manager-clusterrole.yaml", size: 2963, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0xef, 0x4a, 0x71, 0xb7, 0x5d, 0xb, 0xf2, 0xfe, 0xd5, 0x6a, 0x40, 0xd1, 0xd7, 0x9a, 0x75, 0xd4, 0x91, 0xf2, 0xaf, 0x32, 0x5f, 0xe9, 0x8c, 0x6b, 0x9, 0x15, 0xde, 0x61, 0xfd, 0x5f, 0x4a}}
	return a, nil
}

var _capiCapaManagerClusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xb1\x4a\x04\x41\x0c\x86\xfb\x79\x8a\xbc\xc0\x8e\xd8\xc9\x74\x6a\x61\x67\x71\x82\x7d\x36\x1b\xcf\x78\xb3\xc9\x90\xc9\x5c\xe1\x71\xef\x2e\x0b\x77\x82\x88\x76\x09\x7c\xff\xf7\x61\x93\x57\xf6\x2e\xa6\x05\x7c\x46\xca\x38\xe2\xdd\x5c\x3e\x31\xc4\x34\x1f\xee\x7a\x16\xbb\x39\xde\xa6\x83\xe8\x52\xe0\xb1\x8e\x1e\xec\x3b\xab\xfc\x20\xba\x88\xee\xd3\xca\x81\x0b\x06\x96\x04\xa0\xb8\x72\x01\xc2\x86\xd3\x8a\x8a\x7b\xf6\xc9\xad\xf2\x7c\x41\xb7\x7b\xc7\x6f\x1b\x89\x4d\x9e\xdc\x46\xfb\xa7\x9a\x00\x7e\x45\xff\x6e\xa4\x3e\xe6\x0f\xa6\xe8\x9b\x7d\xba\x2c\x5f\xd8\x8f\x42\x7c\x4f\x64\x43\x23\x01\xfc\x98\x93\x69\xb8\xd5\xca\x7e\x35\x7d\x13\xbd\x21\x71\x81\xd3\x09\xf2\xf3\xf5\x85\xf3\x39\x7d\x05\x00\x00\xff\xff\x19\xd2\x37\xd4\x2f\x01\x00\x00")

func capiCapaManagerClusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_capiCapaManagerClusterrolebindingYaml,
		"capi/capa-manager-clusterrolebinding.yaml",
	)
}

func capiCapaManagerClusterrolebindingYaml() (*asset, error) {
	bytes, err := capiCapaManagerClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capi/capa-manager-clusterrolebinding.yaml", size: 303, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0xa9, 0x96, 0x70, 0xae, 0x9, 0x18, 0x78, 0x87, 0x84, 0xfb, 0x4, 0xac, 0x2d, 0x55, 0x64, 0x55, 0xf5, 0xab, 0x37, 0xf6, 0xbe, 0xa2, 0x5f, 0x7, 0xa7, 0x9c, 0x39, 0xb5, 0x22, 0xb3, 0x4b}}
	return a, nil
}

var _capiCapaManagerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xdd\x4e\xe3\x3c\x10\xbd\xcf\x53\xf8\x05\xd2\x7e\x48\xdc\x7c\x96\xb8\xa8\xa0\xcb\x22\xb1\x55\x44\xd1\xee\x25\x1a\x9c\xa1\xb1\x98\x78\xbc\xe3\x49\x50\x16\xf1\xee\x2b\xd3\x06\xa5\xed\xc2\xfe\xf8\x2a\x1e\xcf\x39\x67\xe6\x64\xec\xb2\x2c\x0b\x88\xfe\x2b\x4a\xf2\x1c\xac\x81\x18\xd3\xbc\x3f\x29\x1e\x7d\xa8\xad\xb9\xc0\x48\x3c\xb4\x18\xb4\x68\x51\xa1\x06\x05\x5b\x18\x13\xa0\x45\x6b\x1c\x44\x28\x1d\x07\x15\x26\x42\x29\x5b\x08\xb0\x41\x29\x8c\x21\xb8\x47\x4a\x39\xd3\x98\x5d\x42\x19\x09\xc2\x07\xa0\x14\xd1\x65\x40\x42\x42\xa7\x2c\x5b\x70\x0b\xea\x9a\xeb\x09\xdb\x1f\xf3\x19\x23\x18\xc9\x3b\x48\xd6\x9c\x14\xc6\x28\xb6\x91\x40\x71\xc7\x3b\x69\x26\x2f\xda\x93\xf8\x0b\x11\x63\xc6\xc2\x5f\xbf\x51\x7a\xef\x70\xe1\x1c\x77\x41\x57\xbf\x71\x69\x14\x02\x1f\x50\x26\xe2\xa5\x01\xd9\x4c\xf6\xdb\x58\x59\x66\xd7\x53\x04\x87\x67\xcf\xcf\x66\xb6\x1a\x77\xe6\xe5\xe5\x28\x15\x28\x31\xf1\x46\x39\x69\x8d\x22\x47\xe7\xfd\xd9\xe9\x24\xe6\x5b\xd8\xa0\x35\xdf\x3b\x18\x66\x9e\xe7\xcd\x10\x51\x52\xe3\x1f\x74\xee\xa8\x4b\x8a\x52\x42\xf4\x65\x14\xee\x7d\x9d\x37\x4f\xc9\xb6\x90\xe3\x87\x1c\x55\x47\x54\x31\x79\x37\x58\xb3\xa0\x27\x18\xd2\x24\x63\x3b\x34\xfb\xed\xe7\x15\x59\xf4\xa8\xdb\x37\x5f\x2a\x16\xb5\xe6\xff\xd3\xd3\xff\xf6\x32\x46\xba\x06\x81\xb4\xf9\x71\x70\x16\x85\x95\x1d\x93\x35\xb7\xe7\xd5\xe4\x4c\x10\x6a\x1f\x30\xa5\x4a\xf8\x1e\xf7\x35\x1b\xd5\x78\x89\x6a\x0f\xa9\x40\x1b\x6b\xe6\x19\x39\x1c\xc9\xbc\xd6\x76\x5c\x02\xf9\x1e\xff\x49\xe5\x9d\x6e\xde\x91\xc1\xd0\x1f\xda\xb6\x35\x65\xf1\x6d\x7d\xb7\xfe\xbc\xb8\x59\x5e\xdc\x9d\xdf\x2c\x2f\x96\xab\xdb\xab\xc5\xf5\xfa\xee\xd3\xd5\xf5\xf2\x80\xba\x07\xea\x30\x0b\x73\x8b\xf3\x19\x3c\xa5\xb9\x13\xac\x31\xa8\x07\x9a\xfe\xbb\x9e\xa9\x6b\xf1\x4b\x9e\xea\xa3\x5f\xb5\x7b\x0c\x7e\x89\xcb\xab\xcd\xa8\x6a\xd7\xe0\xa8\x53\x4c\x79\xf7\x66\xff\x23\xba\x84\x4e\x0e\xcd\xdb\xc6\xb6\x77\xed\x6d\x44\x33\x7c\x04\x2a\x4a\xeb\x03\xa8\xe7\x70\x29\xe0\xb0\x42\xf1\x5c\xaf\xd1\x71\xa8\xf3\xe3\x30\x0e\x96\x32\xa1\xbc\xa6\xed\xd5\x83\x0f\x0f\xe8\xd4\x9a\x15\xaf\x5d\x83\x75\x47\x38\x91\x7f\xc4\xc1\x9a\xc0\x35\x96\xc2\x84\xb3\xc7\xee\x1e\x25\xa0\x62\xca\xf7\x68\x77\x47\x7e\x06\x00\x00\xff\xff\xf3\x15\x82\xb3\x62\x05\x00\x00")

func capiCapaManagerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_capiCapaManagerDeploymentYaml,
		"capi/capa-manager-deployment.yaml",
	)
}

func capiCapaManagerDeploymentYaml() (*asset, error) {
	bytes, err := capiCapaManagerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capi/capa-manager-deployment.yaml", size: 1378, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x23, 0xd4, 0xb0, 0x50, 0x30, 0xe5, 0x5a, 0x57, 0xcd, 0x18, 0xba, 0x5c, 0x42, 0xce, 0x8b, 0x6, 0xcc, 0x79, 0xcb, 0xf9, 0x8e, 0xb1, 0x5e, 0xb8, 0xf2, 0x8a, 0x96, 0xd8, 0x90, 0xf0, 0x57}}
	return a, nil
}

var _capiCapaManagerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x03\x31\x08\x05\xd0\xde\x53\xb0\x80\x8b\xb4\x74\x99\x21\x52\xfa\x2f\x8c\x22\x14\x1b\x2c\x8e\xf3\xfc\xf7\xb0\xed\xab\x79\x59\x38\xd3\x79\xb5\xbf\xf9\x60\xfa\x68\x1e\x13\x7d\x8b\xc4\xed\xd5\x96\x16\x06\x0a\xdc\x88\x1c\x4b\x99\x04\x1b\x5d\xc2\x2b\x63\x4e\xcd\xbe\xe0\xf8\x69\x3e\x01\x00\x00\xff\xff\xfb\x85\xa6\xe2\x4d\x00\x00\x00")

func capiCapaManagerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_capiCapaManagerServiceaccountYaml,
		"capi/capa-manager-serviceaccount.yaml",
	)
}

func capiCapaManagerServiceaccountYaml() (*asset, error) {
	bytes, err := capiCapaManagerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capi/capa-manager-serviceaccount.yaml", size: 77, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x54, 0x7e, 0x1a, 0x44, 0x8f, 0xaf, 0xe, 0x93, 0x53, 0x41, 0x28, 0x8e, 0xb2, 0xf2, 0x46, 0x9a, 0x91, 0x50, 0xa4, 0x97, 0x76, 0x96, 0xee, 0x60, 0xea, 0x68, 0x5d, 0x19, 0x30, 0x15, 0xea}}
	return a, nil
}

var _capiManagerClusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xb1\x8e\xdb\x30\x0c\xdd\xfd\x15\x42\x96\x00\x05\xec\xa0\x5b\xe1\xb5\x43\xf7\x0e\xdd\x19\x89\x8e\x85\xc8\xa4\x40\x52\x69\xda\xaf\x2f\xec\x38\x6d\x2f\xb1\x93\x3b\xdc\x4d\x96\xc9\xc7\xf7\xc8\x87\x07\x39\xfe\x40\xd1\xc8\xd4\x3a\xd9\x83\x6f\xa0\x58\xcf\x12\x7f\x83\x45\xa6\xe6\xf8\x45\x9b\xc8\xbb\xd3\xe7\xea\x18\x29\xb4\xee\x6b\x2a\x6a\x28\xdf\x39\x61\x35\xa0\x41\x00\x83\xb6\x72\x8e\x60\xc0\xd6\xf9\x4b\xb7\x86\x1c\x2b\x29\x09\xb5\xad\x6a\x07\x39\x7e\x13\x2e\x59\x47\xdc\xf4\x8b\x67\x43\x1a\x25\x75\xe6\xaf\x9c\x13\x54\x2e\xe2\x71\x46\xf9\xa2\xc6\xc3\xb5\x18\xb0\x8b\x14\xc7\x85\xb4\x72\xee\x84\xb2\x9f\x61\x07\xb4\xe9\x9b\xa2\x5e\x1e\x3f\xc1\x7c\x7f\x2f\xba\x67\x36\x35\x81\xdc\xcc\x2b\x36\xe7\xfa\xaf\x74\xed\x3c\x93\x09\xa7\x9c\x80\x70\x19\x11\xa9\x13\x50\x93\xe2\xad\xc8\x0a\x66\x00\xdf\x47\x42\x5d\xee\xe2\x39\x37\xaf\x61\x81\x10\x46\x63\x56\x39\x96\x0f\xb8\x2f\xde\x18\xba\xfd\xb4\x7d\x69\xdd\x58\xb8\xf3\xa9\xff\x95\x51\xb4\x8f\x9d\x35\x9c\x91\x2e\xaf\x25\xba\x9e\xd5\x30\xfc\xef\x9b\xae\xd5\x77\x6a\x60\x45\xe7\x03\x0c\x85\x20\x4d\x46\xcc\x4b\x3f\xe8\xfc\x1b\x7d\xb6\xf8\x66\xb3\x90\x21\xa6\x2e\x1e\x06\xc8\xcf\x42\x93\xa7\xd0\x3c\x88\xcf\x12\x3b\x9e\x90\xec\x86\xd9\x0b\x82\xe1\x07\x8a\x10\x07\x5c\xd7\x08\x98\xf0\xb9\x5c\xc9\xe1\x3a\xf0\x06\x65\x45\x2f\xf8\x9e\xfb\xfe\x04\x00\x00\xff\xff\x8a\x12\xad\x14\x59\x04\x00\x00")

func capiManagerClusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_capiManagerClusterroleYaml,
		"capi/manager-clusterrole.yaml",
	)
}

func capiManagerClusterroleYaml() (*asset, error) {
	bytes, err := capiManagerClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capi/manager-clusterrole.yaml", size: 1113, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0xe4, 0xc3, 0x70, 0xab, 0xae, 0x6f, 0xee, 0xa9, 0x21, 0xd2, 0x46, 0x1d, 0xc4, 0x90, 0xf6, 0xdd, 0x12, 0xfe, 0xe3, 0x3f, 0x1b, 0x43, 0x3f, 0xc5, 0x25, 0xb1, 0xd0, 0xf6, 0x33, 0x81, 0xba}}
	return a, nil
}

var _capiManagerClusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xb1\xae\xc2\x30\x0c\x45\xf7\x7c\x85\x7f\xa0\x79\x7a\x1b\xca\x06\x0c\x6c\x0c\x45\x62\x77\x53\x03\xa6\x6d\x1c\x25\x4e\x07\xaa\xfe\x3b\x42\x85\x89\x8a\xd1\xbe\xf7\xdc\x83\x91\xcf\x94\x32\x4b\x70\x90\x1a\xf4\x16\x8b\xde\x24\xf1\x03\x95\x25\xd8\x6e\x93\x2d\xcb\xdf\xf8\x6f\x3a\x0e\xad\x83\x7d\x5f\xb2\x52\xaa\xa5\xa7\x1d\x87\x96\xc3\xd5\x0c\xa4\xd8\xa2\xa2\x33\x00\x01\x07\x72\xe0\x97\x52\x85\x91\x4d\x92\x9e\x6a\xba\xbc\x42\x8c\x7c\x48\x52\xe2\x0f\x91\x01\xf8\xf2\xac\xce\xe6\xd2\xdc\xc9\x6b\x76\xa6\x7a\x13\x27\x4a\x23\x7b\xda\x7a\x2f\x25\xe8\x2a\xb4\xfc\x72\x44\x4f\x0e\xa6\x09\xec\xf1\x73\xc2\x3c\x9b\x67\x00\x00\x00\xff\xff\x1a\x7b\x6c\x93\x0a\x01\x00\x00")

func capiManagerClusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_capiManagerClusterrolebindingYaml,
		"capi/manager-clusterrolebinding.yaml",
	)
}

func capiManagerClusterrolebindingYaml() (*asset, error) {
	bytes, err := capiManagerClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capi/manager-clusterrolebinding.yaml", size: 266, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb8, 0x27, 0x2, 0x83, 0x2c, 0x93, 0x57, 0x2, 0x8b, 0xb2, 0x1, 0x17, 0x59, 0xf5, 0x89, 0x5a, 0x53, 0x9d, 0x7b, 0xd6, 0xb2, 0xf6, 0x98, 0x5c, 0xd1, 0x5d, 0xff, 0x3c, 0xa4, 0x59, 0x40, 0x7d}}
	return a, nil
}

var _capiManagerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbb\x6e\xf3\x30\x0c\x85\x77\x3d\x05\x5f\xc0\x31\x02\xfc\x93\x80\x0c\x01\xfe\xb1\x08\x32\x75\x67\x69\xd6\x11\x4a\x5d\x2a\xd2\x29\x8c\x20\xef\x5e\xb8\xcd\xc5\x2e\xac\x49\xe2\x39\xe7\x3b\x14\x96\xf0\xca\x55\x43\x4e\x1e\xb0\x14\x6d\xcf\x5b\xf7\x11\x52\xe7\xe1\x3f\x17\xc9\x63\xe4\x64\x2e\xb2\x61\x87\x86\xde\x01\x24\x8c\xec\x81\x64\x50\xe3\xda\x60\x09\x4e\x0b\xd3\xa4\x54\x2e\x12\x08\xd5\xc3\xd6\x01\x28\x0b\x93\xe5\x3a\x29\x00\x11\x8d\x4e\x2f\xf8\xc6\xa2\xbf\x83\x35\x10\x80\x71\x2c\x82\xc6\xb7\xd0\xac\x76\x3a\xb2\xc8\xaf\x13\x00\xee\xeb\xfc\xdc\xb9\x9e\x03\xf1\x9e\x28\x0f\xc9\x0e\xab\x7e\x00\xca\xc9\x30\x24\xae\x0f\x76\x73\x63\x47\x4c\xd8\x73\x7d\x34\x86\x88\x3d\x7b\xf8\x1c\x70\xdc\x84\xdc\x9e\xc6\xc2\x55\x4f\xe1\xdd\xda\x19\xd5\x3f\xc7\xcb\xe0\x71\x10\x39\x66\x09\x34\x7a\xd8\xcb\x17\x8e\xfa\xd0\x29\xc7\x88\xa9\x7b\xfe\xad\x81\xf6\x6f\x39\xd6\x5e\xe7\x86\xa6\x99\x96\xd4\x82\xc4\xbb\xcb\x05\x36\x87\xfb\x0b\xae\xd7\x85\x0d\x45\xb3\xe4\xde\xb2\x5a\xc7\xb5\x2e\xb4\xf3\xee\x9f\xfb\x0e\x00\x00\xff\xff\x02\x65\x5c\xe9\x04\x02\x00\x00")

func capiManagerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_capiManagerDeploymentYaml,
		"capi/manager-deployment.yaml",
	)
}

func capiManagerDeploymentYaml() (*asset, error) {
	bytes, err := capiManagerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capi/manager-deployment.yaml", size: 516, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xe2, 0xdb, 0xed, 0xe7, 0x68, 0x5f, 0xa5, 0x61, 0x62, 0x6b, 0x41, 0x89, 0xb1, 0xaa, 0xf0, 0x2, 0x28, 0xc2, 0x45, 0x6d, 0xba, 0xef, 0x3c, 0xb8, 0xf3, 0x36, 0x5e, 0x51, 0xbf, 0xd7, 0x89}}
	return a, nil
}

var _capiManagerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0e\x80\x20\x0c\x05\xd0\xbd\xa7\xe8\x05\x1c\x5c\xbb\x79\x06\x13\xf7\xa6\xfc\xa1\x51\x0a\x81\xc2\xf9\x7d\xda\xfd\xc1\x98\xde\x42\x78\x9f\xf4\x7a\x14\xe1\x1b\x63\xbb\xe1\x32\x6b\x2b\x92\x2a\x52\x8b\xa6\x0a\x31\x87\x56\x08\xdb\xb7\x66\x62\x1c\xda\x9d\xfe\x00\x00\x00\xff\xff\x14\xfb\x48\x04\x42\x00\x00\x00")

func capiManagerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_capiManagerServiceaccountYaml,
		"capi/manager-serviceaccount.yaml",
	)
}

func capiManagerServiceaccountYaml() (*asset, error) {
	bytes, err := capiManagerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capi/manager-serviceaccount.yaml", size: 66, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0xd3, 0x3c, 0x7d, 0xa3, 0x26, 0x1e, 0x82, 0x92, 0x74, 0x79, 0x40, 0xca, 0x91, 0x9e, 0x73, 0x8d, 0x2a, 0xe9, 0x1a, 0xf7, 0xcb, 0xa3, 0x30, 0x3c, 0xdd, 0xaf, 0x7a, 0xca, 0xbb, 0x42, 0x55}}
	return a, nil
}

var _controlPlaneOperatorCpOperatorDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4f\x6b\xe3\x30\x10\xc5\xef\xfe\x14\x83\xd9\xc3\x2e\xac\x63\x72\xd5\xcd\x64\xb3\xb0\xb0\x49\x4d\x0b\x85\x52\x4a\x99\xc8\x93\x44\x74\xf4\x07\x49\x76\x09\x21\xdf\xbd\x28\x7f\xd4\x04\x5a\xac\x93\xfd\xde\x6f\xde\x8c\xc4\xa0\x53\x8f\xe4\x83\xb2\x46\x00\x3a\x17\xea\x61\x5a\xbc\x29\xd3\x09\xf8\x43\x8e\xed\x4e\x93\x89\x85\xa6\x88\x1d\x46\x14\x05\x80\x41\x4d\x02\xa4\x35\xd1\x5b\xae\x1c\xa3\xa1\xca\x3a\xf2\x18\xad\x2f\x82\x23\x99\x20\x4f\x8e\x95\xc4\x20\x60\x5a\x00\x04\x62\x92\xd1\xfa\xe4\x00\x68\x8c\x72\xfb\x1f\x57\xc4\xe1\x24\x8c\x64\x02\x44\xd2\x8e\x31\xd2\xb9\xfe\x6a\x98\x74\xf8\x26\x6a\x34\x0c\xe0\x32\xe4\xf1\x9b\xfc\xa0\x24\x35\x52\xda\xde\xc4\xe5\x58\x29\x1c\x4d\x54\x86\x7c\xee\x58\x8d\x77\x4c\x47\x69\xdc\x90\x80\xfd\x1e\x26\xb3\x13\xd9\x26\xf0\xee\xcc\xfd\x4b\x36\x1c\x0e\xb7\x7c\xdb\x33\xb7\x96\x95\xdc\x09\x68\xf8\x1d\x77\x21\xfb\x64\x86\xcf\x3b\x5f\x66\x58\x3c\xbd\x2e\x9b\xc5\xfc\xa1\x6d\x66\xf3\x6c\x02\x0c\xc8\x3d\xfd\xf5\x56\x8b\x2b\x11\x60\xad\x88\xbb\x7b\x5a\xdf\xaa\x67\xbd\xc5\xb8\x15\xf9\xb1\x27\x29\x3f\x38\x94\x94\x59\x69\xb5\xc6\xb4\x28\xcf\x65\xdd\x07\x5f\xaf\x94\xa9\xbf\x7e\x83\xf2\x25\x17\xa1\xdf\x84\x54\xe1\x7b\x53\xfe\x86\xb2\xaa\x72\x6e\xfa\xfd\xf1\xf3\xfa\x02\xbf\x4e\x44\x97\xf7\xf0\x08\x27\xf1\xdb\x36\x1f\x01\x00\x00\xff\xff\x58\x9a\x8c\x15\xce\x02\x00\x00")

func controlPlaneOperatorCpOperatorDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_controlPlaneOperatorCpOperatorDeploymentYaml,
		"control-plane-operator/cp-operator-deployment.yaml",
	)
}

func controlPlaneOperatorCpOperatorDeploymentYaml() (*asset, error) {
	bytes, err := controlPlaneOperatorCpOperatorDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "control-plane-operator/cp-operator-deployment.yaml", size: 718, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x5a, 0x26, 0xaa, 0xd9, 0x62, 0x74, 0x8c, 0xf5, 0x26, 0xa3, 0xa8, 0xf3, 0x76, 0x12, 0x17, 0x8b, 0x83, 0x24, 0x58, 0xec, 0xb8, 0x40, 0x49, 0xd4, 0xfa, 0x9a, 0x33, 0x85, 0xca, 0xb8, 0xc0}}
	return a, nil
}

var _controlPlaneOperatorCpOperatorRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xb1\x8e\xdc\x40\x08\xed\xfd\x15\xa3\x6b\x4e\x8a\xe4\x39\xa5\x8b\xdc\xa6\x48\x9f\x22\x3d\xcb\xb0\x67\x74\xf6\x30\x02\x66\xb3\x9b\xaf\x8f\xbc\xb6\x93\x28\xde\x55\x9c\xd5\x55\x06\x0c\xcf\x8f\x07\x18\x0a\x7f\x23\x35\x96\xdc\x05\x3d\x00\x46\xa8\xde\x8b\xf2\x0f\x70\x96\x1c\xdf\x3e\x59\x64\x79\x39\x7d\x6c\xde\x38\xa7\x2e\x7c\x1e\xaa\x39\xe9\x57\x19\xa8\x19\xc9\x21\x81\x43\xd7\x84\x90\x61\xa4\x2e\xa0\x64\x57\x19\xda\x32\x40\xa6\x56\x0a\x29\xb8\x68\xa3\x75\x20\xeb\x9a\x36\x40\xe1\x2f\x2a\xb5\xd8\x54\xd2\x86\xfe\x52\x48\xad\xe7\xa3\x47\x29\x94\x67\x8b\xa5\x09\x41\xc9\xa4\x2a\xd2\x92\xf8\xfc\xe1\xb9\x09\xe1\x44\x7a\xf8\x23\xb0\x81\x43\xc9\x47\x7e\xfd\x5f\xa8\x57\xf2\xeb\x73\x60\x9b\x8d\xef\xe0\xd8\x6f\xd1\xa1\x30\x9d\x9d\xf2\x24\x95\x2d\xba\x6c\xe1\xb1\x9a\xcb\xb8\x06\x13\x1d\x39\xf3\x24\xa4\xed\xe0\x7f\x10\x71\x73\x85\x12\x71\x56\x39\x9e\xdb\x5f\xdf\x69\x57\x71\xaf\xda\xde\xce\xe0\x7c\x54\x30\xd7\x8a\x5e\xf5\x4e\xce\x08\xd8\x73\x26\xbb\xfd\x96\xce\x25\xee\x41\x81\x94\x26\x15\xee\x62\xdc\x6e\x60\x1b\x7c\x68\xce\xeb\x5e\xbd\xcb\xd2\xa8\x54\xa7\x77\x41\x32\xc2\xaa\xec\x97\x7f\x80\xad\x69\xd3\x38\xe9\xec\x28\x79\x9a\x39\x67\xdf\xb3\x22\x77\x2f\xf4\x51\xd2\x4f\x4f\xdb\x4a\x3a\xd1\xcc\x66\x3d\xa9\x11\xca\xec\x16\x49\xbf\x8d\x97\x41\x5e\xd7\x8e\x94\x96\x82\x2c\x89\x16\x0b\x46\xb2\x02\xb8\xb8\x46\x7a\x62\x24\x40\x94\xba\xa2\x2f\xb1\x3d\x8d\x43\xb9\x52\xf8\x8b\x69\xa2\x32\xc8\x65\xa4\x7d\xe2\x91\x63\x8a\xd3\x0f\xeb\x00\x46\x11\x45\x49\x2c\xa2\x8c\x8f\x6a\xb7\x9c\xd2\x23\xcb\xf3\x33\x00\x00\xff\xff\x75\x2c\xc5\xbb\x76\x05\x00\x00")

func controlPlaneOperatorCpOperatorRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_controlPlaneOperatorCpOperatorRoleYaml,
		"control-plane-operator/cp-operator-role.yaml",
	)
}

func controlPlaneOperatorCpOperatorRoleYaml() (*asset, error) {
	bytes, err := controlPlaneOperatorCpOperatorRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "control-plane-operator/cp-operator-role.yaml", size: 1398, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0xb2, 0x6e, 0x24, 0xb, 0x87, 0xe8, 0xa4, 0xa5, 0x5, 0x8b, 0xd1, 0x9f, 0x54, 0x91, 0x22, 0x3f, 0xe5, 0x5d, 0x62, 0x34, 0x0, 0x67, 0x15, 0xd2, 0xcd, 0xa8, 0xa0, 0x55, 0xee, 0x19, 0x81}}
	return a, nil
}

var _controlPlaneOperatorCpOperatorRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\x31\x4e\xc5\x30\x0c\xc6\xf1\x3d\xa7\xf0\x05\x1a\xc4\x86\xb2\x01\x03\x1b\x43\x91\xd8\xdd\xd4\x80\x69\x6a\x47\x8e\xd3\x81\xaa\x77\x47\x08\x98\x9e\xf4\x3a\x5a\xfe\xfe\xfa\x61\xe5\x57\xb2\xc6\x2a\x09\x6c\xc2\x1c\xb1\xfb\x87\x1a\x7f\xa1\xb3\x4a\x5c\xee\x5a\x64\xbd\xd9\x6e\xc3\xc2\x32\x27\x78\x2c\xbd\x39\xd9\xa8\x85\x1e\x58\x66\x96\xf7\xb0\x92\xe3\x8c\x8e\x29\x00\x08\xae\x94\x20\xab\xb8\x69\x19\x6a\x41\xa1\x41\x2b\x19\xba\x5a\x30\x2d\x34\xd2\xdb\xcf\x0e\x2b\x3f\x99\xf6\x7a\xc5\x0c\x00\x17\xe4\x99\xd0\xfa\xf4\x49\xd9\x5b\x0a\xc3\x5f\xfc\x42\xb6\x71\xa6\xfb\x9c\xb5\x8b\x9f\xf5\xbf\xef\x56\x31\x53\x82\x7d\x87\xf8\xfc\x7f\xc2\x71\x84\xef\x00\x00\x00\xff\xff\x43\xd6\x24\x66\x2b\x01\x00\x00")

func controlPlaneOperatorCpOperatorRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_controlPlaneOperatorCpOperatorRolebindingYaml,
		"control-plane-operator/cp-operator-rolebinding.yaml",
	)
}

func controlPlaneOperatorCpOperatorRolebindingYaml() (*asset, error) {
	bytes, err := controlPlaneOperatorCpOperatorRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "control-plane-operator/cp-operator-rolebinding.yaml", size: 299, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x27, 0xb4, 0xff, 0xef, 0x5c, 0xc1, 0x4, 0xf2, 0xbb, 0xdf, 0xa5, 0xba, 0xa7, 0x0, 0x6, 0xe, 0xb9, 0xe, 0x33, 0xcd, 0xf6, 0x46, 0x24, 0xc3, 0xd0, 0x7d, 0x32, 0x4, 0x58, 0xa3, 0x53}}
	return a, nil
}

var _controlPlaneOperatorCpOperatorServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0e\x80\x30\x08\x00\xc0\x9d\x57\xf0\x81\x0e\xae\x6c\xbe\xc1\xc4\x9d\x50\x06\x62\x0b\x0d\x62\xdf\xef\xf1\xb2\x5b\xf3\xb5\x70\xc2\x7d\xc0\x63\xde\x09\x2f\xcd\x6d\xa2\xa7\x48\x7c\x5e\x30\xb5\xb8\x73\x31\x01\xa2\xf3\x54\x42\x09\xaf\x8c\xd1\xd6\x60\xd7\x16\x4b\x93\x2b\x12\xfe\x00\x00\x00\xff\xff\x39\x3b\x03\x7d\x4d\x00\x00\x00")

func controlPlaneOperatorCpOperatorServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_controlPlaneOperatorCpOperatorServiceaccountYaml,
		"control-plane-operator/cp-operator-serviceaccount.yaml",
	)
}

func controlPlaneOperatorCpOperatorServiceaccountYaml() (*asset, error) {
	bytes, err := controlPlaneOperatorCpOperatorServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "control-plane-operator/cp-operator-serviceaccount.yaml", size: 77, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0x34, 0x79, 0xd4, 0x6e, 0x15, 0x54, 0xce, 0xe5, 0xf, 0x9c, 0xd2, 0x0, 0x86, 0x9a, 0x2e, 0xb7, 0x72, 0x1b, 0x93, 0xc1, 0x5d, 0xa, 0xba, 0xf4, 0xe0, 0x2c, 0x47, 0x40, 0xb1, 0x7, 0xd1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"autoscaler/deployment.yaml":                             autoscalerDeploymentYaml,
	"autoscaler/role.yaml":                                   autoscalerRoleYaml,
	"autoscaler/rolebinding.yaml":                            autoscalerRolebindingYaml,
	"autoscaler/serviceaccount.yaml":                         autoscalerServiceaccountYaml,
	"capi/capa-manager-clusterrole.yaml":                     capiCapaManagerClusterroleYaml,
	"capi/capa-manager-clusterrolebinding.yaml":              capiCapaManagerClusterrolebindingYaml,
	"capi/capa-manager-deployment.yaml":                      capiCapaManagerDeploymentYaml,
	"capi/capa-manager-serviceaccount.yaml":                  capiCapaManagerServiceaccountYaml,
	"capi/manager-clusterrole.yaml":                          capiManagerClusterroleYaml,
	"capi/manager-clusterrolebinding.yaml":                   capiManagerClusterrolebindingYaml,
	"capi/manager-deployment.yaml":                           capiManagerDeploymentYaml,
	"capi/manager-serviceaccount.yaml":                       capiManagerServiceaccountYaml,
	"control-plane-operator/cp-operator-deployment.yaml":     controlPlaneOperatorCpOperatorDeploymentYaml,
	"control-plane-operator/cp-operator-role.yaml":           controlPlaneOperatorCpOperatorRoleYaml,
	"control-plane-operator/cp-operator-rolebinding.yaml":    controlPlaneOperatorCpOperatorRolebindingYaml,
	"control-plane-operator/cp-operator-serviceaccount.yaml": controlPlaneOperatorCpOperatorServiceaccountYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"autoscaler": {nil, map[string]*bintree{
		"deployment.yaml":     {autoscalerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {autoscalerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {autoscalerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {autoscalerServiceaccountYaml, map[string]*bintree{}},
	}},
	"capi": {nil, map[string]*bintree{
		"capa-manager-clusterrole.yaml":        {capiCapaManagerClusterroleYaml, map[string]*bintree{}},
		"capa-manager-clusterrolebinding.yaml": {capiCapaManagerClusterrolebindingYaml, map[string]*bintree{}},
		"capa-manager-deployment.yaml":         {capiCapaManagerDeploymentYaml, map[string]*bintree{}},
		"capa-manager-serviceaccount.yaml":     {capiCapaManagerServiceaccountYaml, map[string]*bintree{}},
		"manager-clusterrole.yaml":             {capiManagerClusterroleYaml, map[string]*bintree{}},
		"manager-clusterrolebinding.yaml":      {capiManagerClusterrolebindingYaml, map[string]*bintree{}},
		"manager-deployment.yaml":              {capiManagerDeploymentYaml, map[string]*bintree{}},
		"manager-serviceaccount.yaml":          {capiManagerServiceaccountYaml, map[string]*bintree{}},
	}},
	"control-plane-operator": {nil, map[string]*bintree{
		"cp-operator-deployment.yaml":     {controlPlaneOperatorCpOperatorDeploymentYaml, map[string]*bintree{}},
		"cp-operator-role.yaml":           {controlPlaneOperatorCpOperatorRoleYaml, map[string]*bintree{}},
		"cp-operator-rolebinding.yaml":    {controlPlaneOperatorCpOperatorRolebindingYaml, map[string]*bintree{}},
		"cp-operator-serviceaccount.yaml": {controlPlaneOperatorCpOperatorServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
